"use strict";
/**
 * Copyright (c) 2018-2022, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.delegationNodeFromChain = exports.delegationHierarchyDetailsFromChain = void 0;
const tslib_1 = require("tslib");
const types_1 = require("@kiltprotocol/types");
const Did = tslib_1.__importStar(require("@kiltprotocol/did"));
function delegationHierarchyDetailsFromChain(encoded) {
    return {
        cTypeHash: encoded.unwrap().ctypeHash.toHex(),
    };
}
exports.delegationHierarchyDetailsFromChain = delegationHierarchyDetailsFromChain;
/**
 * Decode the permissions from the bitset encoded in the given `number`.
 * We use bitwise `AND` to check if a permission bit flag is set.
 *
 * @param encoded The u32 number used as the bitset to encode permissions.
 * @returns The permission set.
 */
function permissionsFromChain(encoded) {
    const bitset = encoded.bits.toNumber();
    const permissions = [];
    // eslint-disable-next-line no-bitwise
    if ((bitset & types_1.Permission.ATTEST) > 0) {
        permissions.push(types_1.Permission.ATTEST);
    }
    // eslint-disable-next-line no-bitwise
    if ((bitset & types_1.Permission.DELEGATE) > 0) {
        permissions.push(types_1.Permission.DELEGATE);
    }
    return permissions;
}
function delegationNodeFromChain(encoded) {
    const delegationNode = encoded.unwrap();
    return {
        hierarchyId: delegationNode.hierarchyRootId.toHex(),
        parentId: delegationNode.parent.isSome
            ? delegationNode.parent.toHex()
            : undefined,
        childrenIds: [...delegationNode.children].map((id) => id.toHex()),
        account: Did.fromChain(delegationNode.details.owner),
        permissions: permissionsFromChain(delegationNode.details.permissions),
        revoked: delegationNode.details.revoked.valueOf(),
    };
}
exports.delegationNodeFromChain = delegationNodeFromChain;
