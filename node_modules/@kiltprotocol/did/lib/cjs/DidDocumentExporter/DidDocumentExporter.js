"use strict";
/**
 * Copyright (c) 2018-2022, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.exportToDidDocument = void 0;
const util_crypto_1 = require("@polkadot/util-crypto");
const types_1 = require("@kiltprotocol/types");
const utils_1 = require("@kiltprotocol/utils");
function exportToJsonDidDocument(did) {
    const { uri: controller, authentication, assertionMethod = [], capabilityDelegation = [], keyAgreement = [], service = [], } = did;
    const verificationMethod = [
        ...authentication,
        ...assertionMethod,
        ...capabilityDelegation,
    ]
        .map((key) => ({ ...key, type: types_1.verificationKeyTypesMap[key.type] }))
        .concat(keyAgreement.map((key) => ({
        ...key,
        type: types_1.encryptionKeyTypesMap[key.type],
    })))
        .map(({ id, type, publicKey }) => ({
        id: `${controller}${id}`,
        controller,
        type,
        publicKeyBase58: (0, util_crypto_1.base58Encode)(publicKey),
    }))
        .filter(
    // remove duplicates
    ({ id }, index, array) => index === array.findIndex((key) => key.id === id));
    return {
        id: controller,
        verificationMethod,
        authentication: [authentication[0].id],
        ...(assertionMethod[0] && {
            assertionMethod: [assertionMethod[0].id],
        }),
        ...(capabilityDelegation[0] && {
            capabilityDelegation: [capabilityDelegation[0].id],
        }),
        ...(keyAgreement.length > 0 && {
            keyAgreement: [keyAgreement[0].id],
        }),
        ...(service.length > 0 && {
            service: service.map((endpoint) => ({
                ...endpoint,
                id: `${controller}${endpoint.id}`,
            })),
        }),
    };
}
function exportToJsonLdDidDocument(did) {
    const document = exportToJsonDidDocument(did);
    document['@context'] = ['https://www.w3.org/ns/did/v1'];
    return document;
}
/**
 * Export a [[DidDocument]] to a W3C-spec conforming DID Document in the format provided.
 *
 * @param did The [[DidDocument]].
 * @param mimeType The format for the output DID Document. Accepted values are `application/json` and `application/ld+json`.
 * @returns The DID Document formatted according to the mime type provided, or an error if the format specified is not supported.
 */
function exportToDidDocument(did, mimeType) {
    switch (mimeType) {
        case 'application/json':
            return exportToJsonDidDocument(did);
        case 'application/ld+json':
            return exportToJsonLdDidDocument(did);
        default:
            throw new utils_1.SDKErrors.DidExporterError(`The MIME type "${mimeType}" not supported by any of the available exporters`);
    }
}
exports.exportToDidDocument = exportToDidDocument;
