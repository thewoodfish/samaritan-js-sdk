/**
 * Copyright (c) 2018-2022, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 */
import type { AnyNumber } from '@polkadot/types/types';
import type { HexString } from '@polkadot/util/types';
import type { KeyringPair } from '@polkadot/keyring/types';
import type { DidUri, KiltAddress } from '@kiltprotocol/types';
import { EncodedSignature } from '../Did.utils.js';
export declare type SubstrateAddress = KeyringPair['address'];
export declare type EthereumAddress = HexString;
export declare type Address = KiltAddress | SubstrateAddress | EthereumAddress;
/**
 * Format a blockchain address to be used as a parameter for the blockchain API functions.
 *
 * @param account The account to format.
 * @returns The blockchain-formatted account.
 */
export declare function accountToChain(account: Address): Address;
declare type AssociateAccountToChainResult = [string, AnyNumber, EncodedSignature];
/**
 * Builds the parameters for an extrinsic to link the `account` to the `did` where the fees and deposit are covered by some third account.
 * This extrinsic must be authorized using the same full DID.
 * Note that in addition to the signing account and DID used here, the submitting account will also be able to dissolve the link via reclaiming its deposit!
 *
 * @param accountAddress Address of the account to be linked.
 * @param did Full DID to be linked.
 * @param sign The sign callback that generates the account signature over the encoded (DidAddress, BlockNumber) tuple.
 * @param nBlocksValid The link request will be rejected if submitted later than (current block number + nBlocksValid)?
 * @returns An array of parameters for `api.tx.didLookup.associateAccount` that must be DID-authorized by the full DID used.
 */
export declare function associateAccountToChainArgs(accountAddress: Address, did: DidUri, sign: (encodedLinkingDetails: HexString) => Promise<Uint8Array>, nBlocksValid?: number): Promise<AssociateAccountToChainResult>;
export {};
