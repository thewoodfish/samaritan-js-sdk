/**
 * Copyright (c) 2018-2022, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 */
/**
 * The ConfigService is used for setting up the node address,
 * the logging level as well as storing custom configuration options.
 *
 * @packageDocumentation
 */
import type { ApiPromise } from '@polkadot/api';
import { LogLevel } from 'typescript-logging';
import { SubscriptionPromise } from '@kiltprotocol/types';
export declare type configOpts = {
    api: ApiPromise;
    logLevel: LogLevel;
    submitTxResolveOn: SubscriptionPromise.ResultEvaluator;
} & {
    [key: string]: any;
};
/**
 * Changes all existing Loggers of our default Factory with id 0 to the intended Level.
 *
 * @param level The intended LogLevel. LogLevel has a range of 0 to 5.
 * @returns The new set level.
 */
export declare function modifyLogLevel(level: LogLevel): LogLevel;
/**
 * Get the value set for a configuration.
 *
 * @param configOpt Key of the configuration.
 * @returns Value for this key.
 */
export declare function get<K extends keyof configOpts>(configOpt: K): configOpts[K];
/**
 * Set values for one or multiple configurations.
 *
 * @param opts Object of configurations as key-value pairs.
 */
export declare function set<K extends Partial<configOpts>>(opts: K): void;
/**
 * Set the value for a configuration to its default (which may be `undefined`).
 *
 * @param key Key identifying the configuration option.
 */
export declare function unset<K extends keyof configOpts>(key: K): void;
/**
 * Indicates whether a configuration option is set.
 *
 * @param key Key identifying the configuration option.
 * @returns True if this value is set, false otherwise.
 */
export declare function isSet<K extends keyof configOpts>(key: K): boolean;
export declare const LoggingFactory: import("typescript-logging").LoggerFactory;
