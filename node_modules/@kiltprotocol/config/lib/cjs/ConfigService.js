"use strict";
/**
 * Copyright (c) 2018-2022, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoggingFactory = exports.isSet = exports.unset = exports.set = exports.get = exports.modifyLogLevel = void 0;
const typescript_logging_1 = require("typescript-logging");
const utils_1 = require("@kiltprotocol/utils");
const DEFAULT_DEBUG_LEVEL = typeof process !== 'undefined' &&
    process.env?.DEBUG &&
    process.env.DEBUG === 'true'
    ? typescript_logging_1.LogLevel.Debug
    : typescript_logging_1.LogLevel.Error;
/**
 * Changes all existing Loggers of our default Factory with id 0 to the intended Level.
 *
 * @param level The intended LogLevel. LogLevel has a range of 0 to 5.
 * @returns The new set level.
 */
function modifyLogLevel(level) {
    // eslint-disable-next-line no-nested-ternary
    const actualLevel = level > 0 ? (level > 5 ? 5 : level) : 0;
    (0, typescript_logging_1.getLogControl)()
        .getLoggerFactoryControl(0)
        .change({
        group: 'all',
        logLevel: typescript_logging_1.LogLevel[actualLevel],
    });
    return actualLevel;
}
exports.modifyLogLevel = modifyLogLevel;
const defaultConfig = {
    logLevel: DEFAULT_DEBUG_LEVEL,
};
let configuration = { ...defaultConfig };
/**
 * Get the value set for a configuration.
 *
 * @param configOpt Key of the configuration.
 * @returns Value for this key.
 */
function get(configOpt) {
    if (typeof configuration[configOpt] === 'undefined') {
        switch (configOpt) {
            case 'api':
                throw new utils_1.SDKErrors.BlockchainApiMissingError();
            default:
                throw new Error(`GENERIC NOT CONFIGURED ERROR FOR KEY: "${configOpt}"`);
        }
    }
    return configuration[configOpt];
}
exports.get = get;
function setLogLevel(logLevel) {
    if (logLevel !== undefined) {
        modifyLogLevel(logLevel);
    }
}
/**
 * Set values for one or multiple configurations.
 *
 * @param opts Object of configurations as key-value pairs.
 */
function set(opts) {
    configuration = { ...configuration, ...opts };
    setLogLevel(configuration.logLevel);
}
exports.set = set;
/**
 * Set the value for a configuration to its default (which may be `undefined`).
 *
 * @param key Key identifying the configuration option.
 */
function unset(key) {
    if (Object.prototype.hasOwnProperty.call(defaultConfig, key)) {
        configuration[key] = defaultConfig[key];
    }
    else {
        delete configuration[key];
    }
}
exports.unset = unset;
/**
 * Indicates whether a configuration option is set.
 *
 * @param key Key identifying the configuration option.
 * @returns True if this value is set, false otherwise.
 */
function isSet(key) {
    return typeof configuration[key] !== 'undefined';
}
exports.isSet = isSet;
// Create options instance and specify 1 LogGroupRule:
// * LogLevel Error on default, env DEBUG = 'true' changes Level to Debug.throws
const options = new typescript_logging_1.LoggerFactoryOptions().addLogGroupRule(new typescript_logging_1.LogGroupRule(new RegExp('.+'), get('logLevel')));
// Create a named logging factory and pass in the options and export the factory.
// Named is since version 0.2.+ (it's recommended for future usage)
exports.LoggingFactory = typescript_logging_1.LFService.createNamedLoggerFactory('LoggerFactory', options);
