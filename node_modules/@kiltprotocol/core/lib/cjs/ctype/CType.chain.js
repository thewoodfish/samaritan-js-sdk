"use strict";
/**
 * Copyright (c) 2018-2022, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromChain = exports.idToChain = exports.toChain = void 0;
const tslib_1 = require("tslib");
const Did = tslib_1.__importStar(require("@kiltprotocol/did"));
const CType_js_1 = require("./CType.js");
/**
 * Encodes the provided CType for use in `api.tx.ctype.add()`.
 *
 * @param ctype The CType to write on the blockchain.
 * @returns Encoded CType.
 */
function toChain(ctype) {
    return (0, CType_js_1.serializeForHash)(ctype);
}
exports.toChain = toChain;
/**
 * Encodes the provided CType['$id'] for use in `api.query.ctype.ctypes()`.
 *
 * @param cTypeId The CType id to translate for the blockchain.
 * @returns Encoded CType id.
 */
function idToChain(cTypeId) {
    return (0, CType_js_1.idToHash)(cTypeId);
}
exports.idToChain = idToChain;
/**
 * Decodes the owner DID from the return value of `api.query.ctype.ctypes(ctypeHash)`.
 *
 * @param encoded The data from the blockchain.
 * @returns The owner DID.
 */
function fromChain(encoded) {
    return Did.fromChain(encoded.unwrap());
}
exports.fromChain = fromChain;
