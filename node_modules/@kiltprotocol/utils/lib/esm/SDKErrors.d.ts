/**
 * Copyright (c) 2018-2022, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 */
/**
 * KILT-specific errors with descriptions.
 *
 * @packageDocumentation
 */
export declare class SDKError extends Error {
    constructor(message?: string, options?: ErrorOptions);
}
export declare class UnauthorizedError extends SDKError {
}
export declare class CTypeHashMissingError extends SDKError {
}
export declare class CTypeIdMismatchError extends SDKError {
    constructor(fromSchema: string, provided: string);
}
export declare class CTypeUnknownPropertiesError extends SDKError {
}
export declare class UnsupportedKeyError extends SDKError {
    constructor(keyType: string);
}
export declare class EncryptionError extends SDKError {
}
export declare class DidError extends SDKError {
}
export declare class DidExporterError extends SDKError {
}
export declare class DidBatchError extends SDKError {
}
export declare class DidNotFoundError extends SDKError {
}
export declare class DidResolveUpgradedDidError extends SDKError {
}
export declare class DidDeactivatedError extends SDKError {
}
export declare class ClaimHashMissingError extends SDKError {
}
export declare class RevokedTypeError extends SDKError {
}
export declare class OwnerMissingError extends SDKError {
}
export declare class LegitimationsMissingError extends SDKError {
}
export declare class ClaimNonceMapMissingError extends SDKError {
}
export declare class ClaimMissingError extends SDKError {
}
export declare class AddressTypeError extends SDKError {
}
export declare class HashTypeError extends SDKError {
}
export declare class HashMalformedError extends SDKError {
    constructor(hash?: string, type?: string);
}
export declare class DataStructureError extends SDKError {
}
export declare class DelegationIdTypeError extends SDKError {
}
export declare class DelegationIdMissingError extends SDKError {
}
export declare class DelegateSignatureMissingError extends SDKError {
}
export declare class InvalidRootNodeError extends SDKError {
}
export declare class InvalidDelegationNodeError extends SDKError {
}
export declare class ClaimContentsMalformedError extends SDKError {
}
export declare class ObjectUnverifiableError extends SDKError {
}
export declare class QuoteUnverifiableError extends SDKError {
}
export declare class ClaimNonceMapMalformedError extends SDKError {
    constructor(statement?: string);
}
export declare class UnknownMessageBodyTypeError extends SDKError {
}
export declare class SignatureMalformedError extends SDKError {
}
export declare class DidSubjectMismatchError extends SDKError {
    constructor(actual: string, expected: string);
}
export declare class HierarchyQueryError extends SDKError {
    constructor(rootId: string);
}
export declare class InvalidDidFormatError extends SDKError {
    constructor(did: string, options?: ErrorOptions);
}
export declare class AddressInvalidError extends SDKError {
    constructor(address?: string, type?: string);
}
export declare class LegitimationsUnverifiableError extends SDKError {
}
export declare class SignatureUnverifiableError extends SDKError {
}
export declare class CredentialUnverifiableError extends SDKError {
}
export declare class ClaimUnverifiableError extends SDKError {
}
export declare class NestedClaimUnverifiableError extends SDKError {
}
export declare class IdentityMismatchError extends SDKError {
    constructor(context?: string, type?: string);
}
export declare class BlockchainApiMissingError extends SDKError {
    constructor(options?: ErrorOptions);
}
export declare class SubscriptionsNotSupportedError extends SDKError {
    constructor(options?: ErrorOptions);
}
export declare class RootHashUnverifiableError extends SDKError {
}
export declare class DecodingMessageError extends SDKError {
}
export declare class TimeoutError extends SDKError {
}
export declare class InvalidProofForStatementError extends SDKError {
    constructor(statement: string);
}
export declare class NoProofForStatementError extends SDKError {
    constructor(statement: string);
}
export declare class CodecMismatchError extends SDKError {
}
