"use strict";
/**
 * Copyright (c) 2018-2022, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromChain = void 0;
const tslib_1 = require("tslib");
const config_1 = require("@kiltprotocol/config");
const Did = tslib_1.__importStar(require("@kiltprotocol/did"));
const log = config_1.ConfigService.LoggingFactory.getLogger('Attestation');
/**
 * Decodes the attestation returned by `api.query.attestation.attestations()`.
 *
 * @param encoded Raw attestation data from blockchain.
 * @param claimHash The attestation claimHash.
 * @returns The attestation.
 */
function fromChain(encoded, claimHash // all the other decoders do not use extra data; they just return partial types
) {
    const chainAttestation = encoded.unwrap();
    const delegationId = chainAttestation.authorizationId
        .unwrapOr(undefined)
        ?.value.toHex();
    const attestation = {
        claimHash,
        cTypeHash: chainAttestation.ctypeHash.toHex(),
        owner: Did.fromChain(chainAttestation.attester),
        delegationId: delegationId || null,
        revoked: chainAttestation.revoked.valueOf(),
    };
    log.info(`Decoded attestation: ${JSON.stringify(attestation)}`);
    return attestation;
}
exports.fromChain = fromChain;
