"use strict";
/**
 * Copyright (c) 2018-2022, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.typesBundle = exports.stakingCalls = exports.didCalls = exports.types = exports.types10900 = exports.types10800 = exports.types10720 = exports.types2700 = exports.types25 = exports.types23 = exports.types21 = exports.types20 = exports.types19 = exports.types18 = exports.types17 = exports.types12 = exports.types10 = exports.types9 = exports.types8 = void 0;
const types_8_js_1 = require("./types_8.js");
Object.defineProperty(exports, "types8", { enumerable: true, get: function () { return types_8_js_1.types8; } });
const types_9_js_1 = require("./types_9.js");
Object.defineProperty(exports, "types9", { enumerable: true, get: function () { return types_9_js_1.types9; } });
const types_10_js_1 = require("./types_10.js");
Object.defineProperty(exports, "types10", { enumerable: true, get: function () { return types_10_js_1.types10; } });
const types_12_js_1 = require("./types_12.js");
Object.defineProperty(exports, "types12", { enumerable: true, get: function () { return types_12_js_1.types12; } });
const types_17_js_1 = require("./types_17.js");
Object.defineProperty(exports, "types17", { enumerable: true, get: function () { return types_17_js_1.types17; } });
const types_18_js_1 = require("./types_18.js");
Object.defineProperty(exports, "types18", { enumerable: true, get: function () { return types_18_js_1.types18; } });
const types_19_js_1 = require("./types_19.js");
Object.defineProperty(exports, "types19", { enumerable: true, get: function () { return types_19_js_1.types19; } });
const types_20_js_1 = require("./types_20.js");
Object.defineProperty(exports, "types20", { enumerable: true, get: function () { return types_20_js_1.types20; } });
const types_21_js_1 = require("./types_21.js");
Object.defineProperty(exports, "types21", { enumerable: true, get: function () { return types_21_js_1.types21; } });
const types_23_js_1 = require("./types_23.js");
Object.defineProperty(exports, "types23", { enumerable: true, get: function () { return types_23_js_1.types23; } });
const types_25_js_1 = require("./types_25.js");
Object.defineProperty(exports, "types25", { enumerable: true, get: function () { return types_25_js_1.types25; } });
const types_2700_js_1 = require("./types_2700.js");
Object.defineProperty(exports, "types2700", { enumerable: true, get: function () { return types_2700_js_1.types2700; } });
const types_10720_js_1 = require("./types_10720.js");
Object.defineProperty(exports, "types10720", { enumerable: true, get: function () { return types_10720_js_1.types10720; } });
const types_10800_js_1 = require("./types_10800.js");
Object.defineProperty(exports, "types10800", { enumerable: true, get: function () { return types_10800_js_1.types10800; } });
Object.defineProperty(exports, "types", { enumerable: true, get: function () { return types_10800_js_1.types10800; } });
const types_10900_js_1 = require("./types_10900.js");
Object.defineProperty(exports, "types10900", { enumerable: true, get: function () { return types_10900_js_1.types10900; } });
// Custom runtime calls
const did_js_1 = require("./runtime/did.js");
const staking_js_1 = require("./runtime/staking.js");
var did_js_2 = require("./runtime/did.js");
Object.defineProperty(exports, "didCalls", { enumerable: true, get: function () { return did_js_2.calls; } });
var staking_js_2 = require("./runtime/staking.js");
Object.defineProperty(exports, "stakingCalls", { enumerable: true, get: function () { return staking_js_2.calls; } });
const defaultTypesBundle = [
    {
        minmax: [0, 8],
        types: types_8_js_1.types8,
    },
    {
        minmax: [9, 9],
        types: types_9_js_1.types9,
    },
    {
        minmax: [10, 11],
        types: types_10_js_1.types10,
    },
    {
        minmax: [12, 16],
        types: types_12_js_1.types12,
    },
    {
        minmax: [17, 17],
        types: types_17_js_1.types17,
    },
    {
        minmax: [18, 18],
        types: types_18_js_1.types18,
    },
    {
        minmax: [19, 19],
        types: types_19_js_1.types19,
    },
    {
        minmax: [20, 20],
        types: types_20_js_1.types20,
    },
    {
        minmax: [21, 22],
        types: types_21_js_1.types21,
    },
    {
        minmax: [23, 24],
        types: types_23_js_1.types23,
    },
    {
        minmax: [25, 2699],
        types: types_25_js_1.types25,
    },
    {
        minmax: [2700, 10710],
        types: types_2700_js_1.types2700,
    },
    {
        minmax: [10720, 10750],
        types: types_10720_js_1.types10720,
    },
    {
        minmax: [10800, 10899],
        types: types_10800_js_1.types10800,
    },
    {
        minmax: [10900, undefined],
        types: types_10900_js_1.types10900,
    },
];
// Current runtime version: 10730
exports.typesBundle = {
    chain: {
        'KILT Spiritnet': {
            runtime: {
                ...did_js_1.calls,
                ...staking_js_1.calls,
            },
            types: defaultTypesBundle,
        },
        'KILT Spiritnet Develop': {
            runtime: {
                ...did_js_1.calls,
                ...staking_js_1.calls,
            },
            types: defaultTypesBundle,
        },
        'KILT Peregrine': {
            runtime: {
                ...did_js_1.calls,
                ...staking_js_1.calls,
            },
            types: defaultTypesBundle,
        },
        'KILT Peregrine Stagenet': {
            runtime: {
                ...did_js_1.calls,
                ...staking_js_1.calls,
            },
            types: defaultTypesBundle,
        },
        'KILT Peregrine Develop': {
            runtime: {
                ...did_js_1.calls,
                ...staking_js_1.calls,
            },
            types: defaultTypesBundle,
        },
        'KILT Mashnet': {
            runtime: {
                ...did_js_1.calls,
            },
            types: defaultTypesBundle,
        },
        Development: {
            runtime: {
                ...did_js_1.calls,
            },
            types: defaultTypesBundle,
        },
    },
};
