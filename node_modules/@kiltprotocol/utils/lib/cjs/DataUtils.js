"use strict";
/**
 * Copyright (c) 2018-2022, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyIsHex = exports.isHex = exports.isKiltAddress = exports.verifyKiltAddress = void 0;
const tslib_1 = require("tslib");
const util_1 = require("@polkadot/util");
const util_crypto_1 = require("@polkadot/util-crypto");
const SDKErrors = tslib_1.__importStar(require("./SDKErrors.js"));
const ss58Format_js_1 = require("./ss58Format.js");
/**
 * Verifies a given address string against the External Address Format (SS58) with our Prefix of 38.
 *
 * @param input Address string to validate for correct Format.
 */
function verifyKiltAddress(input) {
    if (typeof input !== 'string') {
        throw new SDKErrors.AddressTypeError();
    }
    if (!(0, util_crypto_1.checkAddress)(input, ss58Format_js_1.ss58Format)[0]) {
        throw new SDKErrors.AddressInvalidError(input);
    }
}
exports.verifyKiltAddress = verifyKiltAddress;
/**
 * Type guard to check whether input is an SS58 address with our prefix of 38.
 *
 * @param input Address string to validate for correct format.
 * @returns True if input is a KiltAddress, false otherwise.
 */
function isKiltAddress(input) {
    try {
        verifyKiltAddress(input);
        return true;
    }
    catch {
        return false;
    }
}
exports.isKiltAddress = isKiltAddress;
// re-exporting isHex
var util_2 = require("@polkadot/util");
Object.defineProperty(exports, "isHex", { enumerable: true, get: function () { return util_2.isHex; } });
/**
 * Validates the format of a hex string via regex.
 *
 * @param input Hex string to validate for correct format.
 * @param bitLength Expected length of hex in bits.
 */
function verifyIsHex(input, bitLength) {
    if (!(0, util_1.isHex)(input, bitLength)) {
        throw new SDKErrors.HashMalformedError(typeof input === 'string' ? input : undefined);
    }
}
exports.verifyIsHex = verifyIsHex;
