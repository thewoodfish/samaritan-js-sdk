/**
 * Copyright (c) 2018-2022, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 */
/// <reference types="bn.js" />
import type { Extrinsic } from '@polkadot/types/interfaces';
import type { SubmittableExtrinsicFunction } from '@polkadot/api/types';
import { BN } from '@polkadot/util';
import type { DidUri, KiltAddress, SignExtrinsicCallback, SubmittableExtrinsic, VerificationKeyRelationship } from '@kiltprotocol/types';
/**
 * Detect the key relationship for a key which should be used to DID-authorize the provided extrinsic.
 *
 * @param extrinsic The unsigned extrinsic to inspect.
 * @returns The key relationship.
 */
export declare function getKeyRelationshipForTx(extrinsic: Extrinsic): VerificationKeyRelationship | undefined;
/**
 * Signs and returns the provided unsigned extrinsic with the right DID key, if present. Otherwise, it will throw an error.
 *
 * @param did The DID data.
 * @param extrinsic The unsigned extrinsic to sign.
 * @param sign The callback to sign the operation.
 * @param submitterAccount The KILT account to bind the DID operation to (to avoid MitM and replay attacks).
 * @param signingOptions The signing options.
 * @param signingOptions.txCounter The optional DID nonce to include in the operation signatures. By default, it uses the next value of the nonce stored on chain.
 * @returns The DID-signed submittable extrinsic.
 */
export declare function authorizeTx(did: DidUri, extrinsic: Extrinsic, sign: SignExtrinsicCallback, submitterAccount: KiltAddress, { txCounter, }?: {
    txCounter?: BN;
}): Promise<SubmittableExtrinsic>;
/**
 * Authorizes/signs a list of extrinsics grouping them in batches by required key type.
 *
 * @param input The object with named parameters.
 * @param input.batchFunction The batch function to use, for example `api.tx.utility.batchAll`.
 * @param input.did The DID document.
 * @param input.extrinsics The array of unsigned extrinsics to sign.
 * @param input.sign The callback to sign the operation.
 * @param input.submitter The KILT account to bind the DID operation to (to avoid MitM and replay attacks).
 * @param input.nonce The optional nonce to use for the first batch, next batches will use incremented value.
 * @returns The DID-signed submittable extrinsic.
 */
export declare function authorizeBatch({ batchFunction, did, extrinsics, nonce, sign, submitter, }: {
    batchFunction: SubmittableExtrinsicFunction<'promise'>;
    did: DidUri;
    extrinsics: Extrinsic[];
    nonce?: BN;
    sign: SignExtrinsicCallback;
    submitter: KiltAddress;
}): Promise<SubmittableExtrinsic>;
