/**
 * Copyright (c) 2018-2022, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 */
import { AnyNumber } from '@polkadot/types/types';
import type { ISubmittableResult, KeyringPair, SubmittableExtrinsic, SubscriptionPromise } from '@kiltprotocol/types';
export declare const TxOutdated = "Transaction is outdated";
export declare const TxPriority = "Priority is too low:";
export declare const TxDuplicate = "Transaction Already Imported";
/**
 * Evaluator resolves on extrinsic reaching status "is ready".
 *
 * @param result Submission result.
 * @returns Whether the extrinsic reached status "is ready".
 */
export declare function IS_READY(result: ISubmittableResult): boolean;
/**
 * Evaluator resolves on extrinsic reaching status "in block".
 *
 * @param result Submission result.
 * @returns Whether the extrinsic reached status "in block".
 */
export declare function IS_IN_BLOCK(result: ISubmittableResult): boolean;
/**
 * Evaluator resolves on extrinsic reaching status "success".
 *
 * @param result Submission result.
 * @returns Whether the extrinsic reached status "success".
 */
export declare function EXTRINSIC_EXECUTED(result: ISubmittableResult): boolean;
/**
 * Evaluator resolves on extrinsic reaching status "finalized".
 *
 * @param result Submission result.
 * @returns Whether the extrinsic reached status "finalized".
 */
export declare function IS_FINALIZED(result: ISubmittableResult): boolean;
/**
 * Evaluator resolves on extrinsic reaching status "is error".
 *
 * @param result Submission result.
 * @returns Whether the extrinsic reached status "is error" and the error itself.
 */
export declare function IS_ERROR(result: ISubmittableResult): boolean | Error | undefined;
/**
 * Evaluator resolves on extrinsic reaching status "is ready".
 *
 * @param result Submission result.
 * @returns Whether the extrinsic reached status "is ready".
 */
export declare function EXTRINSIC_FAILED(result: ISubmittableResult): boolean;
/**
 * Submits a signed SubmittableExtrinsic and attaches a callback to monitor the inclusion status of the transaction
 * and possible errors in the execution of extrinsics. Returns a promise to that end which by default resolves upon
 * finalization or rejects if any errors occur during submission or execution of extrinsics. This behavior can be adjusted via optional parameters or via the [[ConfigService]].
 *
 * Transaction fees will apply whenever a transaction fee makes it into a block, even if extrinsics fail to execute correctly!
 *
 * @param tx The SubmittableExtrinsic to be submitted. Most transactions need to be signed, this must be done beforehand.
 * @param opts Allows overwriting criteria for resolving/rejecting the transaction result subscription promise. These options take precedent over configuration via the ConfigService.
 * @returns A promise which can be used to track transaction status.
 * If resolved, this promise returns ISubmittableResult that has led to its resolution.
 */
export declare function submitSignedTx(tx: SubmittableExtrinsic, opts?: Partial<SubscriptionPromise.Options>): Promise<ISubmittableResult>;
export declare const dispatchTx: typeof submitSignedTx;
/**
 * Signs and submits the SubmittableExtrinsic with optional resolution and rejection criteria.
 *
 * @param tx The generated unsigned SubmittableExtrinsic to submit.
 * @param signer The [[KiltKeyringPair]] used to sign the tx.
 * @param opts Partial optional criteria for resolving/rejecting the promise.
 * @param opts.tip Optional amount of Femto-KILT to tip the validator.
 * @returns Promise result of executing the extrinsic, of type ISubmittableResult.
 */
export declare function signAndSubmitTx(tx: SubmittableExtrinsic, signer: KeyringPair, { tip, ...opts }?: Partial<SubscriptionPromise.Options> & Partial<{
    tip: AnyNumber;
}>): Promise<ISubmittableResult>;
