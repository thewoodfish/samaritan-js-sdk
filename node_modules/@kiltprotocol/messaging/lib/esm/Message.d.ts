/**
 * Copyright (c) 2018-2022, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 */
import type { DecryptCallback, DidResolveKey, DidResourceUri, EncryptCallback, IEncryptedMessage, ICType, IDelegationData, IMessage, MessageBody } from '@kiltprotocol/types';
/**
 * Checks if delegation data is well formed.
 *
 * @param delegationData Delegation data to check.
 */
export declare function verifyDelegationStructure(delegationData: IDelegationData): void;
/**
 * Checks if the message body is well-formed.
 *
 * @param body The message body.
 */
export declare function verifyMessageBody(body: MessageBody): void;
/**
 * Checks if the message object is well-formed.
 *
 * @param message The message object.
 */
export declare function verifyMessageEnvelope(message: IMessage): void;
/**
 * Verifies required properties for a given [[CType]] before sending or receiving a message.
 *
 * @param requiredProperties The list of required properties that need to be verified against a [[CType]].
 * @param cType A [[CType]] used to verify the properties.
 */
export declare function verifyRequiredCTypeProperties(requiredProperties: string[], cType: ICType): void;
/**
 * Verifies that the sender of a [[Message]] is also the owner of it, e.g the owner's and sender's DIDs refer to the same subject.
 *
 * @param message The [[Message]] object which needs to be decrypted.
 * @param message.body The body of the [[Message]] which depends on the [[BodyType]].
 * @param message.sender The sender's DID taken from the [[IMessage]].
 */
export declare function ensureOwnerIsSender({ body, sender }: IMessage): void;
/**
 * Symmetrically decrypts the result of [[encrypt]].
 *
 * @param encrypted The encrypted message.
 * @param decryptCallback The callback to decrypt with the secret key.
 * @param decryptionOptions Options to perform the decryption operation.
 * @param decryptionOptions.resolveKey The DID key resolver to use.
 * @returns The original [[Message]].
 */
export declare function decrypt(encrypted: IEncryptedMessage, decryptCallback: DecryptCallback, { resolveKey, }?: {
    resolveKey?: DidResolveKey;
}): Promise<IMessage>;
/**
 * Checks the message structure and body contents (e.g. Hashes match, ensures the owner is the sender).
 * Throws, if a check fails.
 *
 * @param decryptedMessage The decrypted message to check.
 */
export declare function verify(decryptedMessage: IMessage): void;
/**
 * Constructs a message from a message body.
 * This should be encrypted with [[encrypt]] before sending to the receiver.
 *
 * @param body The body of the message.
 * @param sender The DID of the sender.
 * @param receiver The DID of the receiver.
 * @returns The message created.
 */
export declare function fromBody(body: MessageBody, sender: IMessage['sender'], receiver: IMessage['receiver']): IMessage;
/**
 * Encrypts the [[Message]] as a string. This can be reversed with [[decrypt]].
 *
 * @param message The message to encrypt.
 * @param encryptCallback The callback to encrypt with the secret key.
 * @param receiverKeyUri The key URI of the receiver.
 * @param encryptionOptions Options to perform the encryption operation.
 * @param encryptionOptions.resolveKey The DID key resolver to use.
 *
 * @returns The encrypted version of the original [[Message]], see [[IEncryptedMessage]].
 */
export declare function encrypt(message: IMessage, encryptCallback: EncryptCallback, receiverKeyUri: DidResourceUri, { resolveKey, }?: {
    resolveKey?: DidResolveKey;
}): Promise<IEncryptedMessage>;
