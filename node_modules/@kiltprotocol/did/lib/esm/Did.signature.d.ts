/**
 * Copyright (c) 2018-2022, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 */
import { DidResolveKey, DidResourceUri, DidSignature, DidUri, SignResponseData, VerificationKeyRelationship } from '@kiltprotocol/types';
export declare type DidSignatureVerificationInput = {
    message: string | Uint8Array;
    signature: Uint8Array;
    keyUri: DidResourceUri;
    expectedSigner?: DidUri;
    allowUpgraded?: boolean;
    expectedVerificationMethod?: VerificationKeyRelationship;
    didResolveKey?: DidResolveKey;
};
declare type OldDidSignature = Pick<DidSignature, 'signature'> & {
    keyId: DidSignature['keyUri'];
};
/**
 * Verify a DID signature given the key URI of the signature.
 * A signature verification returns false if a migrated and then deleted DID is used.
 *
 * @param input Object wrapping all input.
 * @param input.message The message that was signed.
 * @param input.signature Signature bytes.
 * @param input.keyUri DID URI of the key used for signing.
 * @param input.expectedSigner If given, verification fails if the controller of the signing key is not the expectedSigner.
 * @param input.allowUpgraded If `expectedSigner` is a light DID, setting this flag to `true` will accept signatures by the corresponding full DID.
 * @param input.expectedVerificationMethod Which relationship to the signer DID the key must have.
 * @param input.didResolveKey Allows specifying a custom DID key resolve. Defaults to the built-in [[resolveKey]].
 */
export declare function verifyDidSignature({ message, signature, keyUri, expectedSigner, allowUpgraded, expectedVerificationMethod, didResolveKey, }: DidSignatureVerificationInput): Promise<void>;
/**
 * Type guard assuring that the input is a valid DidSignature object, consisting of a signature as hex and the uri of the signing key.
 * Does not cryptographically verify the signature itself!
 *
 * @param input Arbitrary input.
 * @returns True if validation of form has passed.
 */
export declare function isDidSignature(input: unknown): input is DidSignature | OldDidSignature;
/**
 * Transforms the output of a [[SignCallback]] into the [[DidSignature]] format suitable for json-based data exchange.
 *
 * @param input Signature data returned from the [[SignCallback]].
 * @param input.signature Signature bytes.
 * @param input.keyUri DID URI of the key used for signing.
 * @returns A [[DidSignature]] object where signature is hex-encoded.
 */
export declare function signatureToJson({ signature, keyUri, }: SignResponseData): DidSignature;
/**
 * Deserializes a [[DidSignature]] for signature verification.
 * Handles backwards compatibility to an older version of the interface where the `keyUri` property was called `keyId`.
 *
 * @param input A [[DidSignature]] object.
 * @returns The deserialized DidSignature where the signature is represented as a Uint8Array.
 */
export declare function signatureFromJson(input: DidSignature | OldDidSignature): Pick<SignResponseData, 'keyUri' | 'signature'>;
export {};
