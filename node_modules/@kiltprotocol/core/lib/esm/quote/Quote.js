/**
 * Copyright (c) 2018-2022, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 */
import { Crypto, JsonSchema, SDKErrors } from '@kiltprotocol/utils';
import { resolveKey, verifyDidSignature, signatureToJson, signatureFromJson, } from '@kiltprotocol/did';
import { QuoteSchema } from './QuoteSchema.js';
/**
 * Validates the quote against the meta schema and quote data against the provided schema.
 *
 * @param schema A [[Quote]] schema object.
 * @param validate [[Quote]] data to be validated against the provided schema.
 * @param messages The errors messages are listed in an array.
 *
 * @returns Whether the quote schema is valid.
 */
export function validateQuoteSchema(schema, validate, messages) {
    const validator = new JsonSchema.Validator(schema);
    if (schema.$id !== QuoteSchema.$id) {
        validator.addSchema(QuoteSchema);
    }
    const result = validator.validate(validate);
    if (!result.valid && messages) {
        result.errors.forEach((error) => {
            messages.push(error.error);
        });
    }
    return result.valid;
}
// TODO: should have a "create quote" function.
/**
 * Signs a [[Quote]] object as an Attester.
 *
 * @param quoteInput A [[Quote]] object.
 * @param sign The callback to sign with the private key.
 * @returns A signed [[Quote]] object.
 */
export async function createAttesterSignedQuote(quoteInput, sign) {
    if (!validateQuoteSchema(QuoteSchema, quoteInput)) {
        throw new SDKErrors.QuoteUnverifiableError();
    }
    const signature = await sign({
        data: Crypto.hash(Crypto.encodeObjectAsStr(quoteInput)),
        did: quoteInput.attesterDid,
        keyRelationship: 'authentication',
    });
    return {
        ...quoteInput,
        attesterSignature: signatureToJson(signature),
    };
}
/**
 * Verifies a [[IQuoteAttesterSigned]] object.
 *
 * @param quote The object which to be verified.
 * @param options Optional settings.
 * @param options.didResolveKey Resolve function used in the process of verifying the attester signature.
 */
export async function verifyAttesterSignedQuote(quote, { didResolveKey = resolveKey, } = {}) {
    const { attesterSignature, ...basicQuote } = quote;
    await verifyDidSignature({
        ...signatureFromJson(attesterSignature),
        message: Crypto.hashStr(Crypto.encodeObjectAsStr(basicQuote)),
        expectedSigner: basicQuote.attesterDid,
        expectedVerificationMethod: 'authentication',
        didResolveKey,
    });
    const messages = [];
    if (!validateQuoteSchema(QuoteSchema, basicQuote, messages)) {
        throw new SDKErrors.QuoteUnverifiableError();
    }
}
/**
 * Creates a [[Quote]] signed by the Attester and the Claimer.
 *
 * @param attesterSignedQuote A [[Quote]] object signed by an Attester.
 * @param credentialRootHash A root hash of the entire object.
 * @param sign The callback to sign with the private key.
 * @param claimerDid The DID of the Claimer, who has to sign.
 * @param options Optional settings.
 * @param options.didResolveKey Resolve function used in the process of verifying the attester signature.
 * @returns A [[Quote]] agreement signed by both the Attester and Claimer.
 */
export async function createQuoteAgreement(attesterSignedQuote, credentialRootHash, sign, claimerDid, { didResolveKey = resolveKey, } = {}) {
    const { attesterSignature, ...basicQuote } = attesterSignedQuote;
    await verifyDidSignature({
        ...signatureFromJson(attesterSignature),
        message: Crypto.hashStr(Crypto.encodeObjectAsStr(basicQuote)),
        expectedVerificationMethod: 'authentication',
        didResolveKey,
    });
    const quoteAgreement = {
        ...attesterSignedQuote,
        rootHash: credentialRootHash,
        claimerDid,
    };
    const signature = await sign({
        data: Crypto.hash(Crypto.encodeObjectAsStr(quoteAgreement)),
        did: claimerDid,
        keyRelationship: 'authentication',
    });
    return {
        ...quoteAgreement,
        claimerSignature: signatureToJson(signature),
    };
}
/**
 * Verifies a [[IQuoteAgreement]] object.
 *
 * @param quote The object to be verified.
 * @param options Optional settings.
 * @param options.didResolveKey Resolve function used in the process of verifying the attester signature.
 */
export async function verifyQuoteAgreement(quote, { didResolveKey = resolveKey, } = {}) {
    const { claimerSignature, claimerDid, rootHash, ...attesterSignedQuote } = quote;
    // verify attester signature
    await verifyAttesterSignedQuote(attesterSignedQuote, { didResolveKey });
    // verify claimer signature
    await verifyDidSignature({
        ...signatureFromJson(claimerSignature),
        message: Crypto.hashStr(Crypto.encodeObjectAsStr({ ...attesterSignedQuote, claimerDid, rootHash })),
        expectedSigner: claimerDid,
        expectedVerificationMethod: 'authentication',
        didResolveKey,
    });
}
