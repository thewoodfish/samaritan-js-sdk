/**
 * Copyright (c) 2018-2022, BOTLabs GmbH.
 *
 * This source code is licensed under the BSD 4-Clause "Original" license
 * found in the LICENSE file in the root directory of this source tree.
 */
import { DidEncryptionKey, DidResourceUri, DidServiceEndpoint, DidUri, DidVerificationKey, EncryptionKeyType, VerificationKeyType } from './DidDocument.js';
export declare type ConformingDidDocumentKeyType = 'Ed25519VerificationKey2018' | 'Sr25519VerificationKey2020' | 'EcdsaSecp256k1VerificationKey2019' | 'X25519KeyAgreementKey2019';
export declare const verificationKeyTypesMap: Record<VerificationKeyType, ConformingDidDocumentKeyType>;
export declare const encryptionKeyTypesMap: Record<EncryptionKeyType, ConformingDidDocumentKeyType>;
/**
 * A spec-compliant description of a DID key.
 */
export declare type ConformingDidKey = {
    /**
     * The full key URI, in the form of <did>#<key_id>.
     */
    id: DidResourceUri;
    /**
     * The key controller, in the form of <did_subject>.
     */
    controller: DidUri;
    /**
     * The base58-encoded public component of the key.
     */
    publicKeyBase58: string;
    /**
     * The key type signalling the intended signing/encryption algorithm for the use of this key.
     */
    type: ConformingDidDocumentKeyType;
};
/**
 * A spec-compliant description of a DID endpoint.
 */
export declare type ConformingDidServiceEndpoint = Omit<DidServiceEndpoint, 'id'> & {
    /**
     * The full service URI, in the form of <did>#<service_id>.
     */
    id: DidResourceUri;
};
/**
 * A DID Document according to the [W3C DID Core specification](https://www.w3.org/TR/did-core/).
 */
export declare type ConformingDidDocument = {
    id: DidUri;
    verificationMethod: ConformingDidKey[];
    authentication: [DidVerificationKey['id']];
    assertionMethod?: [DidVerificationKey['id']];
    keyAgreement?: [DidEncryptionKey['id']];
    capabilityDelegation?: [DidVerificationKey['id']];
    service?: ConformingDidServiceEndpoint[];
};
/**
 * A JSON+LD DID Document that extends a traditional DID Document with additional semantic information.
 */
export declare type JsonLDDidDocument = ConformingDidDocument & {
    '@context': string[];
};
